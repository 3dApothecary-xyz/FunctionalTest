# delete squarebracket-dot-dynamicmacros-dot-cfg-squarebracket] statement at start of file
# Update History at End of this printer.cfg
[include mainsail.cfg]

[respond]
default_type: echo


# dynamicmacros and toolhead.cfg commented out at start of SD Card Imaging Process
#[dynamicmacros]
#configs: dynamic.cfg
#interface_workaround: true

#[include toolhead.cfg]
#[temperature_sensor toolhead_temp]
#sensor_type: temperature_mcu
#sensor_mcu: toolhead
#min_temp: 0
#max_temp: 100

 
[gcode_macro global] ### Global Variables 
variable_xyz_run_current:   0.5
variable_xyz_home_current:  0.3
variable_xyz_home_sgthrs:  70
variable_sensorvalue:       0
gcode:

[include mcu.cfg]
[temperature_sensor mcu_temp]
sensor_type: temperature_mcu

[temperature_sensor cm4]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[mcu host]
serial: /tmp/klipper_host_mcu

[virtual_sdcard]
path: /home/biqu/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

[printer]
kinematics: cartesian
max_velocity: 1000
max_accel: 1000


[gcode_macro vintest]   
gcode:
    {% set VINMON_VALUE = ( printer["temperature_sensor PS_voltage"].temperature )|float %}
    RESPOND TYPE=command MSG="VINTest: { VINMON_VALUE }V"
    {% if 23.5 > VINMON_VALUE %}      
        RESPOND TYPE=error MSG="VINTest: Voltage BELOW 24V"
    {% else %}
        {% if 24.5 < VINMON_VALUE %}      
            RESPOND TYPE=error MSG="VINTest: Voltage ABOVE 24V"
        {% else %}
            RESPOND TYPE=command MSG="VINTest: PASS"
        {% endif %}
    {% endif %}

[gcode_macro mcutest]   
gcode:
    {% set MCU_VALUE = ( printer["temperature_sensor mcu_temp"].temperature )|float %}
    RESPOND TYPE=command MSG="MCUTest: Temperature: { MCU_VALUE }C"
    {% if 10 > MCU_VALUE %}      
        RESPOND TYPE=error MSG="MCUTest: Temperature Unexpectedly Low"
    {% else %}
#        {% if 40 < MCU_VALUE %}      
        {% if 50 < MCU_VALUE %}      #$# Put in for KGPFT3
            RESPOND TYPE=error MSG="MCUTest: Temperature Unexpectedly High"
        {% else %}
            RESPOND TYPE=command MSG="MCUTest: PASS"
        {% endif %}
    {% endif %}

[gcode_macro toolheadtest]   
gcode:
    {% set EBB_VALUE = ( printer["temperature_sensor toolhead_temp"].temperature )|float %}
    RESPOND TYPE=command MSG="ToolheadTest: Temperature: { EBB_VALUE }C"
    {% if 10 > EBB_VALUE %}      
        RESPOND TYPE=error MSG="ToolheadTest: Temperature Unexpectedly Low"
    {% else %}
        {% if 40 < EBB_VALUE %}      
            RESPOND TYPE=error MSG="ToolheadTest: Temperature Unexpectedly High"
        {% else %}
            RESPOND TYPE=command MSG="ToolheadTest: PASS"
        {% endif %}
    {% endif %}
   
[gcode_macro thermtest]   
gcode:
    {% set THERM_NUM = params.VALUE|int %}
    {% set THERM_VALUE = -1 %}
    {% if 0 == THERM_NUM %}
        {% set THERM_VALUE = ( printer["temperature_probe thermo0"].temperature )|float %}
    {% endif %}
    {% if 1 == THERM_NUM %}
        {% set THERM_VALUE = ( printer["temperature_probe thermo1"].temperature )|float %}
    {% endif %}
    {% set THERM_VALUE = THERM_VALUE|round(1) %}
    RESPOND TYPE=command MSG="ThermTest: thermo{ THERM_NUM }: { THERM_VALUE }C"
    {% if 0 > THERM_VALUE %}      
        RESPOND TYPE=error MSG="ThermTest: Check thermo{ THERM_NUM } Connection to HeaterBoard"
    {% else %}
        {% if 42 < THERM_VALUE %}      
            {% if 44 > THERM_VALUE %}      
                RESPOND TYPE=command MSG="ThermTest: thermo{ THERM_NUM }: PASS"
            {% else %}
                RESPOND TYPE=error MSG="ThermTest: thermo{ THERM_NUM } Too Warm"
            {% endif %}
        {% else %}
            RESPOND TYPE=error MSG="ThermTest: thermo{ THERM_NUM } Too Cool"
        {% endif %}
    {% endif %}

   

[gcode_macro getsensorvalue]
gcode:
  RESPOND TYPE=command MSG="sensorvalue={ printer["gcode_macro global"].sensorvalue }"

[gcode_button dsensor0]
pin: PB8
#analog_range:
#analog_pullup_resistor:
press_gcode:
    {% set bitvalue = printer["gcode_macro global"].sensorvalue|int %}
    {% set chkvalue = (bitvalue / 2)|int %}
#    RESPOND TYPE=command MSG="sensorvalue={printer["gcode_macro global"].sensorvalue}, bitvalue={bitvalue}, chkvalue={chkvalue}, chkvalue*2={ chkvalue * 2 }"
    {% if bitvalue != (chkvalue * 2) %}      
      SET_GCODE_VARIABLE MACRO=global VARIABLE=sensorvalue VALUE={ printer["gcode_macro global"].sensorvalue - 1 }
    {% endif %}
release_gcode:
    {% set bitvalue = printer["gcode_macro global"].sensorvalue|int %}
    {% set chkvalue = (bitvalue / 2)|int %}
#    RESPOND TYPE=command MSG="sensorvalue={printer["gcode_macro global"].sensorvalue}, bitvalue={bitvalue}, chkvalue={chkvalue}, chkvalue*2={ chkvalue * 2 }"
    {% if bitvalue == (chkvalue * 2) %}      
      SET_GCODE_VARIABLE MACRO=global VARIABLE=sensorvalue VALUE={ printer["gcode_macro global"].sensorvalue + 1 }
    {% endif %}

[gcode_button dsensor1]
pin: PA15
#analog_range:
#analog_pullup_resistor:
press_gcode:
    {% set bitvalue = (printer["gcode_macro global"].sensorvalue / 2)|int %}
    {% set chkvalue = (bitvalue / 2)|int %}
#    RESPOND TYPE=command MSG="sensorvalue={printer["gcode_macro global"].sensorvalue}, bitvalue={bitvalue}, chkvalue={chkvalue}, chkvalue*2={ chkvalue * 2 }"
    {% if bitvalue != (chkvalue * 2) %}      
      SET_GCODE_VARIABLE MACRO=global VARIABLE=sensorvalue VALUE={ printer["gcode_macro global"].sensorvalue - 2 }
    {% endif %}
release_gcode:
    {% set bitvalue = (printer["gcode_macro global"].sensorvalue / 2)|int %}
    {% set chkvalue = (bitvalue / 2)|int %}
#    RESPOND TYPE=command MSG="sensorvalue={printer["gcode_macro global"].sensorvalue}, bitvalue={bitvalue}, chkvalue={chkvalue}, chkvalue*2={ chkvalue * 2 }"
    {% if bitvalue == (chkvalue * 2) %}      
      SET_GCODE_VARIABLE MACRO=global VARIABLE=sensorvalue VALUE={ printer["gcode_macro global"].sensorvalue + 2 }
    {% endif %}

[gcode_button dsensor2]
pin: PB5
#analog_range:
#analog_pullup_resistor:
press_gcode:
    {% set bitvalue = (printer["gcode_macro global"].sensorvalue / 4)|int %}
    {% set chkvalue = (bitvalue / 2)|int %}
#    RESPOND TYPE=command MSG="sensorvalue={printer["gcode_macro global"].sensorvalue}, bitvalue={bitvalue}, chkvalue={chkvalue}, chkvalue*2={ chkvalue * 2 }"
    {% if bitvalue != (chkvalue * 2) %}      
      SET_GCODE_VARIABLE MACRO=global VARIABLE=sensorvalue VALUE={ printer["gcode_macro global"].sensorvalue - 4 }
    {% endif %}
release_gcode:
    {% set bitvalue = (printer["gcode_macro global"].sensorvalue / 4)|int %}
    {% set chkvalue = (bitvalue / 2)|int %}
#    RESPOND TYPE=command MSG="sensorvalue={printer["gcode_macro global"].sensorvalue}, bitvalue={bitvalue}, chkvalue={chkvalue}, chkvalue*2={ chkvalue * 2 }"
    {% if bitvalue == (chkvalue * 2) %}      
      SET_GCODE_VARIABLE MACRO=global VARIABLE=sensorvalue VALUE={ printer["gcode_macro global"].sensorvalue + 4 }
    {% endif %}

[gcode_button dsensor3]
pin: PB1
#analog_range:
#analog_pullup_resistor:
press_gcode:
    {% set bitvalue = (printer["gcode_macro global"].sensorvalue / 8)|int %}
    {% set chkvalue = (bitvalue / 2)|int %}
#    RESPOND TYPE=command MSG="sensorvalue={printer["gcode_macro global"].sensorvalue}, bitvalue={bitvalue}, chkvalue={chkvalue}, chkvalue*2={ chkvalue * 2 }"
    {% if bitvalue != (chkvalue * 2) %}      
      SET_GCODE_VARIABLE MACRO=global VARIABLE=sensorvalue VALUE={ printer["gcode_macro global"].sensorvalue - 8 }
    {% endif %}
release_gcode:
    {% set bitvalue = (printer["gcode_macro global"].sensorvalue / 8)|int %}
    {% set chkvalue = (bitvalue / 2)|int %}
#    RESPOND TYPE=command MSG="sensorvalue={printer["gcode_macro global"].sensorvalue}, bitvalue={bitvalue}, chkvalue={chkvalue}, chkvalue*2={ chkvalue * 2 }"
    {% if bitvalue == (chkvalue * 2) %}      
      SET_GCODE_VARIABLE MACRO=global VARIABLE=sensorvalue VALUE={ printer["gcode_macro global"].sensorvalue + 8 }
    {% endif %}

[gcode_button dsensor4]
pin: PB2
#analog_range:
#analog_pullup_resistor:
press_gcode:
    {% set bitvalue = (printer["gcode_macro global"].sensorvalue / 16)|int %}
    {% set chkvalue = (bitvalue / 2)|int %}
#    RESPOND TYPE=command MSG="sensorvalue={printer["gcode_macro global"].sensorvalue}, bitvalue={bitvalue}, chkvalue={chkvalue}, chkvalue*2={ chkvalue * 2 }"
    {% if bitvalue != (chkvalue * 2) %}      
      SET_GCODE_VARIABLE MACRO=global VARIABLE=sensorvalue VALUE={ printer["gcode_macro global"].sensorvalue - 16 } 
    {% endif %}
release_gcode:
    {% set bitvalue = (printer["gcode_macro global"].sensorvalue / 16)|int %}
    {% set chkvalue = (bitvalue / 2)|int %}
#    RESPOND TYPE=command MSG="sensorvalue={printer["gcode_macro global"].sensorvalue}, bitvalue={bitvalue}, chkvalue={chkvalue}, chkvalue*2={ chkvalue * 2 }"
    {% if bitvalue == (chkvalue * 2) %}      
      SET_GCODE_VARIABLE MACRO=global VARIABLE=sensorvalue VALUE={ printer["gcode_macro global"].sensorvalue + 16 }
    {% endif %}

[gcode_button indsensor]
pin: PC5
#analog_range:
#analog_pullup_resistor:
press_gcode:
    {% set bitvalue = (printer["gcode_macro global"].sensorvalue / 32)|int %}
    {% set chkvalue = (bitvalue / 2)|int %}
#    RESPOND TYPE=command MSG="sensorvalue={printer["gcode_macro global"].sensorvalue}, bitvalue={bitvalue}, chkvalue={chkvalue}, chkvalue*2={ chkvalue * 2 }"
    {% if bitvalue != (chkvalue * 2) %}      
      SET_GCODE_VARIABLE MACRO=global VARIABLE=sensorvalue VALUE={ printer["gcode_macro global"].sensorvalue - 32 } 
    {% endif %}
release_gcode:
    {% set bitvalue = (printer["gcode_macro global"].sensorvalue / 32)|int %}
    {% set chkvalue = (bitvalue / 2)|int %}
#    RESPOND TYPE=command MSG="sensorvalue={printer["gcode_macro global"].sensorvalue}, bitvalue={bitvalue}, chkvalue={chkvalue}, chkvalue*2={ chkvalue * 2 }"
    {% if bitvalue == (chkvalue * 2) %}      
      SET_GCODE_VARIABLE MACRO=global VARIABLE=sensorvalue VALUE={ printer["gcode_macro global"].sensorvalue + 32 }
    {% endif %}

[gcode_button neoin0]
pin: host:gpio2
#analog_range:
#analog_pullup_resistor:
press_gcode:
    {% set bitvalue = (printer["gcode_macro global"].sensorvalue / 64)|int %}
    {% set chkvalue = (bitvalue / 2)|int %}
#    RESPOND TYPE=command MSG="sensorvalue={printer["gcode_macro global"].sensorvalue}, bitvalue={bitvalue}, chkvalue={chkvalue}, chkvalue*2={ chkvalue * 2 }"
    {% if bitvalue != (chkvalue * 2) %}      
      SET_GCODE_VARIABLE MACRO=global VARIABLE=sensorvalue VALUE={ printer["gcode_macro global"].sensorvalue - 64 } 
    {% endif %}
release_gcode:
    {% set bitvalue = (printer["gcode_macro global"].sensorvalue / 64)|int %}
    {% set chkvalue = (bitvalue / 2)|int %}
#    RESPOND TYPE=command MSG="sensorvalue={printer["gcode_macro global"].sensorvalue}, bitvalue={bitvalue}, chkvalue={chkvalue}, chkvalue*2={ chkvalue * 2 }"
    {% if bitvalue == (chkvalue * 2) %}      
      SET_GCODE_VARIABLE MACRO=global VARIABLE=sensorvalue VALUE={ printer["gcode_macro global"].sensorvalue + 64 }
    {% endif %}

[gcode_button neoin1]
pin: host:gpio3
#analog_range:
#analog_pullup_resistor:
press_gcode:
    {% set bitvalue = (printer["gcode_macro global"].sensorvalue / 128)|int %}
    {% set chkvalue = (bitvalue / 2)|int %}
#    RESPOND TYPE=command MSG="sensorvalue={printer["gcode_macro global"].sensorvalue}, bitvalue={bitvalue}, chkvalue={chkvalue}, chkvalue*2={ chkvalue * 2 }"
    {% if bitvalue != (chkvalue * 2) %}      
      SET_GCODE_VARIABLE MACRO=global VARIABLE=sensorvalue VALUE={ printer["gcode_macro global"].sensorvalue - 128 } 
    {% endif %}
release_gcode:
    {% set bitvalue = (printer["gcode_macro global"].sensorvalue / 128)|int %}
    {% set chkvalue = (bitvalue / 2)|int %}
#    RESPOND TYPE=command MSG="sensorvalue={printer["gcode_macro global"].sensorvalue}, bitvalue={bitvalue}, chkvalue={chkvalue}, chkvalue*2={ chkvalue * 2 }"
    {% if bitvalue == (chkvalue * 2) %}      
      SET_GCODE_VARIABLE MACRO=global VARIABLE=sensorvalue VALUE={ printer["gcode_macro global"].sensorvalue + 128 }
    {% endif %}

[gcode_button blprobein]
pin: PD3
#analog_range:
#analog_pullup_resistor:
press_gcode:
    {% set bitvalue = (printer["gcode_macro global"].sensorvalue / 256)|int %}
    {% set chkvalue = (bitvalue / 2)|int %}
#    RESPOND TYPE=command MSG="sensorvalue={printer["gcode_macro global"].sensorvalue}, bitvalue={bitvalue}, chkvalue={chkvalue}, chkvalue*2={ chkvalue * 2 }"
    {% if bitvalue != (chkvalue * 2) %}      
      SET_GCODE_VARIABLE MACRO=global VARIABLE=sensorvalue VALUE={ printer["gcode_macro global"].sensorvalue - 256 } 
    {% endif %}
release_gcode:
    {% set bitvalue = (printer["gcode_macro global"].sensorvalue / 256)|int %}
    {% set chkvalue = (bitvalue / 2)|int %}
#    RESPOND TYPE=command MSG="sensorvalue={printer["gcode_macro global"].sensorvalue}, bitvalue={bitvalue}, chkvalue={chkvalue}, chkvalue*2={ chkvalue * 2 }"
    {% if bitvalue == (chkvalue * 2) %}      
      SET_GCODE_VARIABLE MACRO=global VARIABLE=sensorvalue VALUE={ printer["gcode_macro global"].sensorvalue + 256 }
    {% endif %}

[gcode_button blservo]
pin: host:gpio22
#analog_range:
#analog_pullup_resistor:
press_gcode:
    {% set bitvalue = (printer["gcode_macro global"].sensorvalue / 512)|int %}
    {% set chkvalue = (bitvalue / 2)|int %}
#    RESPOND TYPE=command MSG="sensorvalue={printer["gcode_macro global"].sensorvalue}, bitvalue={bitvalue}, chkvalue={chkvalue}, chkvalue*2={ chkvalue * 2 }"
    {% if bitvalue != (chkvalue * 2) %}      
      SET_GCODE_VARIABLE MACRO=global VARIABLE=sensorvalue VALUE={ printer["gcode_macro global"].sensorvalue - 512 } 
    {% endif %}
release_gcode:
    {% set bitvalue = (printer["gcode_macro global"].sensorvalue / 512)|int %}
    {% set chkvalue = (bitvalue / 2)|int %}
#    RESPOND TYPE=command MSG="sensorvalue={printer["gcode_macro global"].sensorvalue}, bitvalue={bitvalue}, chkvalue={chkvalue}, chkvalue*2={ chkvalue * 2 }"
    {% if bitvalue == (chkvalue * 2) %}      
      SET_GCODE_VARIABLE MACRO=global VARIABLE=sensorvalue VALUE={ printer["gcode_macro global"].sensorvalue + 512 }
    {% endif %}

[gcode_button spicsmosi]
pin: host:gpio27
#analog_range:
#analog_pullup_resistor:
press_gcode:
    {% set bitvalue = (printer["gcode_macro global"].sensorvalue / 1024)|int %}
    {% set chkvalue = (bitvalue / 2)|int %}
#    RESPOND TYPE=command MSG="sensorvalue={printer["gcode_macro global"].sensorvalue}, bitvalue={bitvalue}, chkvalue={chkvalue}, chkvalue*2={ chkvalue * 2 }"
    {% if bitvalue != (chkvalue * 2) %}      
      SET_GCODE_VARIABLE MACRO=global VARIABLE=sensorvalue VALUE={ printer["gcode_macro global"].sensorvalue - 1024 } 
    {% endif %}
release_gcode:
    {% set bitvalue = (printer["gcode_macro global"].sensorvalue / 1024)|int %}
    {% set chkvalue = (bitvalue / 2)|int %}
#    RESPOND TYPE=command MSG="sensorvalue={printer["gcode_macro global"].sensorvalue}, bitvalue={bitvalue}, chkvalue={chkvalue}, chkvalue*2={ chkvalue * 2 }"
    {% if bitvalue == (chkvalue * 2) %}      
      SET_GCODE_VARIABLE MACRO=global VARIABLE=sensorvalue VALUE={ printer["gcode_macro global"].sensorvalue + 1024 }
    {% endif %}



# Pins Updated for NewHat3/HeaterBoard
[output_pin dsensormuxA]
pin: host:gpio7
[output_pin dsensormuxB]
pin: host:gpio11
[output_pin dsensormuxC]
pin: host:gpio9
[output_pin neopixel0]
pin: PD5
[output_pin neopixel1]
pin: PD2
[output_pin blprobe]
pin: host:gpio18
[output_pin blservo]
pin: PD4
[output_pin spics]
pin: PB0
[output_pin spimosi]
pin: PA7
[output_pin fan0]
pin: PA8
[output_pin fan1]
pin: PC12
[output_pin fan2]
pin: PC1
[output_pin fan3]
pin: PC4
[output_pin heater0]
pin: PD6
[output_pin heater1]
pin: PB3

[gcode_macro setdemux] 
gcode:
    {% set value = params.VALUE|int %}
    {% if 0 == value %} # All Off
        SET_PIN PIN=dsensormuxC VALUE={0}
        SET_PIN PIN=dsensormuxB VALUE={0}
        SET_PIN PIN=dsensormuxA VALUE={0}
    {% endif %}
    {% if 1 == value %} # DSENSOR0
        SET_PIN PIN=dsensormuxC VALUE={1}
        SET_PIN PIN=dsensormuxB VALUE={0}
        SET_PIN PIN=dsensormuxA VALUE={1}
    {% endif %}
    {% if 2 == value %} # DSENSOR1
        SET_PIN PIN=dsensormuxC VALUE={1}
        SET_PIN PIN=dsensormuxB VALUE={0}
        SET_PIN PIN=dsensormuxA VALUE={0}
    {% endif %}
    {% if 3 == value %} # DSENSOR2
        SET_PIN PIN=dsensormuxC VALUE={0}
        SET_PIN PIN=dsensormuxB VALUE={1}
        SET_PIN PIN=dsensormuxA VALUE={1}
    {% endif %}
    {% if 4 == value %} # DSENSOR3
        SET_PIN PIN=dsensormuxC VALUE={0}
        SET_PIN PIN=dsensormuxB VALUE={1}
        SET_PIN PIN=dsensormuxA VALUE={0}
    {% endif %}
    {% if 5 == value %} # DSENSOR4
        SET_PIN PIN=dsensormuxC VALUE={0}
        SET_PIN PIN=dsensormuxB VALUE={0}
        SET_PIN PIN=dsensormuxA VALUE={1}
    {% endif %}
    {% if 6 == value %}
        SET_PIN PIN=dsensormuxC VALUE={1}
        SET_PIN PIN=dsensormuxB VALUE={1}
        SET_PIN PIN=dsensormuxA VALUE={0}
    {% endif %}
    {% if 7 == value %} # All Off
        SET_PIN PIN=dsensormuxC VALUE={1}
        SET_PIN PIN=dsensormuxB VALUE={1}
        SET_PIN PIN=dsensormuxA VALUE={1}
    {% endif %}


[gcode_macro setneopixel]
gcode:
    {% set number = params.NUMBER|int %}
    {% set value = params.VALUE|int %}
    {% if 0 == number %} 
        {% if 0 == value %} 
            SET_PIN PIN=neopixel0 VALUE={0}
        {% endif %}
        {% if 1 == value %} 
            SET_PIN PIN=neopixel0 VALUE={1}
        {% endif %}
    {% endif %}
    {% if 1 == number %} 
        {% if 0 == value %} 
            SET_PIN PIN=neopixel1 VALUE={0}
        {% endif %}
        {% if 1 == value %} 
            SET_PIN PIN=neopixel1 VALUE={1}
        {% endif %}
    {% endif %}


[gcode_macro setheater]
gcode:
    {% set number = params.NUMBER|int %}
    {% set value = params.VALUE|int %}
    {% if 0 == number %} 
        {% if 0 == value %} 
            SET_PIN PIN=heater0 VALUE={0}
        {% endif %}
        {% if 1 == value %} 
            SET_PIN PIN=heater0 VALUE={1}
        {% endif %}
    {% endif %}
    {% if 1 == number %} 
        {% if 0 == value %} 
            SET_PIN PIN=heater1 VALUE={0}
        {% endif %}
        {% if 1 == value %} 
            SET_PIN PIN=heater1 VALUE={1}
        {% endif %}
    {% endif %}


[gcode_macro setfan]
gcode:
    {% set number = params.NUMBER|int %}
    {% set value = params.VALUE|int %}
    {% if 0 == number %} 
        {% if 0 == value %} 
            SET_PIN PIN=fan0 VALUE={0}
        {% endif %}
        {% if 1 == value %} 
            SET_PIN PIN=fan0 VALUE={1}
        {% endif %}
    {% endif %}
    {% if 1 == number %} 
        {% if 0 == value %} 
            SET_PIN PIN=fan1 VALUE={0}
        {% endif %}
        {% if 1 == value %} 
            SET_PIN PIN=fan1 VALUE={1}
        {% endif %}
    {% endif %}
    {% if 2 == number %} 
        {% if 0 == value %} 
            SET_PIN PIN=fan2 VALUE={0}
        {% endif %}
        {% if 1 == value %} 
            SET_PIN PIN=fan2 VALUE={1}
        {% endif %}
    {% endif %}
    {% if 3 == number %} 
        {% if 0 == value %} 
            SET_PIN PIN=fan3 VALUE={0}
        {% endif %}
        {% if 1 == value %} 
            SET_PIN PIN=fan3 VALUE={1}
        {% endif %}
    {% endif %}


[gcode_macro resetblprobe]
gcode:
    SET_PIN PIN=blprobe VALUE={0}
[gcode_macro setblprobe]
gcode:
    SET_PIN PIN=blprobe VALUE={1}
[gcode_macro resetblservo]
gcode:
    SET_PIN PIN=blservo VALUE={0}
[gcode_macro setblservo]
gcode:
    SET_PIN PIN=blservo VALUE={1}

[gcode_macro setspicsmosi]
gcode:
    {% set setvalue = params.VALUE|int %}
    {% set chkvalue = (setvalue / 2)|int %}
    {% if 2 > setvalue %}
        SET_PIN PIN=spics VALUE={0}
    {% else %}
        SET_PIN PIN=spics VALUE={1}
    {% endif %}
    {% if (chkvalue * 2) == setvalue %}
        SET_PIN PIN=spimosi VALUE={0}
    {% else %}
        SET_PIN PIN=spimosi VALUE={1}
    {% endif %}


[adc_temperature PS_voltage]
# PSU Voltage Value from Thermistor Value
# Assumuptions:
# 1. Power Supply Voltage from 0V to 70V
# 2. Thermistor ADC Pullup 4.7k
temperature1: 2
voltage1: 0.151
temperature2: 70
voltage2: 3.049
[temperature_sensor PS_voltage]
adc_voltage: 3.3
sensor_pin: PA2  #$# VINMON
sensor_type: PS_voltage
#min_temp: 11  # For 12V Power Supply
#max_temp: 26  # For 24V Power Supply
gcode_id: PS_voltage

[temperature_probe thermo0]
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA0

[temperature_probe thermo1]
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA1


#### Macros to implement sensorless homing
[gcode_macro _HOME_X]
gcode:
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer["gcode_macro global"].xyz_home_current}
    SET_TMC_CURRENT STEPPER=dual_carriage CURRENT={printer["gcode_macro global"].xyz_home_current}
    SET_TMC_FIELD STEPPER=stepper_x FIELD=SGTHRS VALUE={printer["gcode_macro global"].xyz_home_sgthrs}
    SET_TMC_FIELD STEPPER=dual_carriage FIELD=SGTHRS VALUE={printer["gcode_macro global"].xyz_home_sgthrs}
    G4 P500                                          # Wait for StallGuard registers to clear

    G28 X

    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer["gcode_macro global"].xyz_run_current}
    SET_TMC_CURRENT STEPPER=dual_carriage CURRENT={printer["gcode_macro global"].xyz_run_current}

    SET_DUAL_CARRIAGE CARRIAGE=1
    
    G91                                              # Move away to centre of build surface

    SET_DUAL_CARRIAGE CARRIAGE=0
    
    G91                                              # Move away to centre of build surface

[gcode_macro _HOME_Y]
gcode:
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer["gcode_macro global"].xyz_home_current}
    SET_TMC_FIELD STEPPER=stepper_y FIELD=SGTHRS VALUE={printer["gcode_macro global"].xyz_home_sgthrs}

    G4 P500                                          # Wait for StallGuard registers to clear

    G28 Y

    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer["gcode_macro global"].xyz_run_current}
    
    G91                                              # Move away to centre of build surface

[gcode_macro _HOME_Z]
gcode:
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer["gcode_macro global"].xyz_home_current}
    SET_TMC_FIELD STEPPER=stepper_z FIELD=SGTHRS VALUE={printer["gcode_macro global"].xyz_home_sgthrs}

    G4 P500                                          # Wait for StallGuard registers to clear

    G28 Z

    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer["gcode_macro global"].xyz_run_current}
    
    G91                                              # Move away to centre of build surface

[homing_override]
axes: xyz                                            
gcode:
  {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}

  {% if home_all or 'X' in params %}
    _HOME_X
  {% endif %}
   
  {% if home_all or 'Y' in params %}
    _HOME_Y
  {% endif %}
  
  {% if home_all or 'Z' in params %}
    _HOME_Z
  {% endif %}


# Motor 0
[stepper_x]
enable_pin: !PC9
dir_pin: PA10
step_pin: PB15
microsteps: 16
rotation_distance: 40
#$#endstop_pin: !PB12
endstop_pin: tmc2209_stepper_x:virtual_endstop
position_min: -7
position_max: 230
position_endstop: 230
homing_speed: 25
[tmc2209 stepper_x]
uart_pin: PC15
uart_address: 0
diag_pin: PB4
run_current: 0.580
stealthchop_threshold: 999999
driver_SGTHRS: 70

# Motor 1
[dual_carriage]
axis: x
enable_pin: !PB9
dir_pin: !PC11
step_pin: PC10
microsteps: 16
rotation_distance: 40
#$#endstop_pin: !PC14
endstop_pin = tmc2209_dual_carriage:virtual_endstop
position_min: -2
position_max: 225
position_endstop: -2
homing_speed: 25
safe_distance: 1
[tmc2209 dual_carriage]
uart_pin: PC15
uart_address: 1
diag_pin: PC13
run_current: 0.580
stealthchop_threshold: 999999
#driver_SGTHRS: 80
driver_SGTHRS: 70


# Motor 2
[stepper_y]
enable_pin: !PC14
dir_pin: PA13
step_pin: PA3
microsteps: 16
rotation_distance: 40
#endstop_pin: PB5
endstop_pin: tmc2209_stepper_y:virtual_endstop
position_min: -5
position_max: 250
position_endstop: 250
homing_speed: 25
[tmc2209 stepper_y]
uart_pin: PC15
uart_address: 2
diag_pin: PC0
run_current: 0.580
stealthchop_threshold: 999999
driver_SGTHRS: 70


# Motor 3
[stepper_z]
enable_pin: !PC2
dir_pin: PB10
step_pin: PB12
microsteps: 16
rotation_distance: 40
endstop_pin = tmc2209_stepper_z:virtual_endstop
position_max: 230
position_endstop: 230
homing_speed: 25
[tmc2209 stepper_z]
uart_pin: PC15
uart_address: 3
diag_pin: PC3
run_current: 0.580
stealthchop_threshold: 999999
driver_sgthrs: 70

# Update History
# 2025.06.11 - Basic Functional Test printer.cfg for new rPi CM4 SD Card Setup
# 2025.06.18 - Test macro numbering Updated for Bash Script Test Process
#            - Test macros provide hardware/Klipper interface for Bash Scripts
#            - Test macros simplified from original plan
#            - Heater Temperature Ranges Moved Higher due to PID Calibration Ranging
#            - Did PID Calibrate for the heaters
# 2025.06.24 - Changed "test##" to "macrotest##" to allow test script test order changes
# 2025.07.01 - Reverse "dsensor#pin" specified GPIO as NewHat2 Optimal Wiring Doesn't match markings
#            - Updating "dsensorvalue" variable for DSENSOR# Response instead of turning on LED Strip
# 2025.07.13 - Fixed Error in how "dsensorvalue" is updated
# 2025.07.26 - Updated Corrected Stepper Motor definitions
#            - Deleted system generated Dynamic Macros Include Statement at start of this file
#            - Moved the toolhead.cfg Include Statement to top of file to make it easier to find
#            - Commented out the Dyunamic Macros and toolhead.cfg include statements to avoid doing it
#              during SD Card Setup
# 2025.08.01 - Updates for NewHat3
#            - Commenting out "dsensor#pin"
#            - Added "dsensormux#" pins where "#" is "A"/"B"/"C" for selecting "DSENSOR#" Inputs
#            - Put in Updated Homing Macro (with the ability to change the SGTHRS Register)
#            - Commented out NeoPixel Definitions
# 2025.08.05 - Commented out/Removed references to ADXL345 and BLTouch
#            - Testing will now concentrate on the functional operation of the IO Ports
# 2025.08.12 - Testing NewHat3a
#            - Added NeoPixel test inputs that are located on teh rPi 40 Pin IO Connector
#            - Changed variable "dsensorvalue" to "sensorvalue" to better reflect that there are 
#              more than just "dsensor" values modifying it
# 2025.08.14 - Added "indstop" Testing on HeaterBoard
# 2025.08.15 - Added "BLTouch" Testing on HeaterBoard
#            - Added "ADXL345MOSI" Testing on HeaterBoard
#            - Cleaned up Commented out tests
# 2025.08.16 - Adding Heater/Fan Tests
# 2025.08.20 - Removed obsolete Heater statements
#            - Removed obsolete test macros
# 2025.08.21 - Changed testmacro4 to handle a parameter for a specific thermistor
#            - Removed testmacro5 as a test of thermo1
#            - Changed basic test macro names to "DeviceName" concatenated to "test"
# 2025.08.23 - Created "setdemux" macro to pull down DSENSOR/INDSTOP pins as originally envisioned:
#            - SETDEMUX VALUE=0 # No Sensor Pins Pulled Down
#            - SETDEMUX VALUE=1 # DSENSOR0 Pin Pulled Down
#            - SETDEMUX VALUE=2 # DSENSOR1 Pin Pulled Down
#            - SETDEMUX VALUE=3 # DSENSOR2 Pin Pulled Down
#            - SETDEMUX VALUE=4 # DSENSOR3 Pin Pulled Down
#            - SETDEMUX VALUE=5 # DSENSOR4 Pin Pulled Down
#            - SETDEMUX VALUE=6 # INDSTOP Pin Pulled Down
#            - SETDEMUX VALUE=7 # No Sensor Pins Pulled Down
#            - Created "setneopixel" macro to set logic level of specified NeoPixel Output pin
#            - reordered sensorvalue variable bit settings so that INDSTOP is before NeoPixels
#            - Changed "setheater" & "setfan" macros to better match "setdemux"
