# 2025.06.11 - Basic Functional Test printer.cfg for new rPi CM4 SD Card Setup
# 2025.06.18 - Test macro numbering Updated for Bash Script Test Process
#            - Test macros provide hardware/Klipper interface for Bash Scripts
#            - Test macros simplified from original plan

[include mainsail.cfg]

[respond]
default_type: echo


[gcode_macro test02]   
gcode:
    {% set VINMON_VALUE = ( printer["temperature_sensor PS_voltage"].temperature )|float %}
    RESPOND TYPE=command MSG="Test02: VINMON Test: { VINMON_VALUE }V"
    {% if 23.5 > VINMON_VALUE %}      
        RESPOND TYPE=error MSG="Test02: VINMON Voltage BELOW 24V"
    {% else %}
        {% if 24.5 < VINMON_VALUE %}      
            RESPOND TYPE=error MSG="Test02: VINMON Voltage ABOVE 24V"
        {% else %}
            RESPOND TYPE=command MSG="Test02: VINMON Test: PASS"
        {% endif %}
    {% endif %}

[gcode_macro test03]   
gcode:
    {% set MCU_VALUE = ( printer["temperature_sensor mcu_temp"].temperature )|float %}
    RESPOND TYPE=command MSG="Test03: MCU Temperature: { MCU_VALUE }C"
    {% if 10 > MCU_VALUE %}      
        RESPOND TYPE=error MSG="Test03: MCU Temperature Unexpectedly Low"
    {% else %}
        {% if 40 < MCU_VALUE %}      
            RESPOND TYPE=error MSG="Test03: MCU Temperature Unexpectedly High"
        {% else %}
            RESPOND TYPE=command MSG="Test03: MCU Temperature Test: PASS"
        {% endif %}
    {% endif %}

[gcode_macro test04]   
gcode:
    {% set EBB_VALUE = ( printer["temperature_sensor toolhead_temp"].temperature )|float %}
    RESPOND TYPE=command MSG="Test04: Toolhead Temperature Test: { EBB_VALUE }C"
    {% if 10 > EBB_VALUE %}      
        RESPOND TYPE=error MSG="Test04: Toolhead Temperature Unexpected Low"
    {% else %}
        {% if 40 < EBB_VALUE %}      
            RESPOND TYPE=error MSG="Test04: Toolhead Temperature Unexpected High"
        {% else %}
            RESPOND TYPE=command MSG="Test04: Toolhead Temperature Test: PASS"
        {% endif %}
    {% endif %}

   
[gcode_macro test05]   
gcode:
    {% set THERM0_VALUE = ( printer["heater_generic heater0"].temperature )|float %}
    RESPOND TYPE=command MSG="Test05: THERM0 Test: { THERM0_VALUE }C"
    {% if 0 > THERM0_VALUE %}      
        RESPOND TYPE=error MSG="Test05: Check THERMO0 Connection to Thermistor"
    {% else %}
        {% if 40 < THERM0_VALUE %}      
            RESPOND TYPE=error MSG="Test05: THERMO0 Too Warm"
        {% else %}
            RESPOND TYPE=command MSG="Test05: THERMO0 Test: PASS"
        {% endif %}
    {% endif %}
   
[gcode_macro test06]   
gcode:
    {% set THERM1_VALUE = ( printer["heater_generic heater1"].temperature )|float %}
    {% if 0 > THERM1_VALUE %}      
        RESPOND TYPE=error MSG="Test06: Check THERMO1 Connection to Thermistor"
    {% else %}
        {% if 40 < THERM1_VALUE %}      
            RESPOND TYPE=error MSG="Test06: THERMO1 Too Warm"
        {% else %}
            RESPOND TYPE=command MSG="Test06: THERMO1 Test: PASS"
        {% endif %}
    {% endif %}
   

[adxl345]
spi_bus: spi1
cs_pin: PB0
axes_map: x,z,y

[resonance_tester]
accel_chip: adxl345
probe_points:
    # Somewhere slightly above the middle of your print bed
    111,111,11
    
[gcode_macro test5]   
gcode:
   {% if 1 == printer["gcode_macro variables_functional_test"].testok %}
      SET_GCODE_VARIABLE MACRO=variables_functional_test VARIABLE=testnumber VALUE={ printer["gcode_macro variables_functional_test"].testnumber + 1 }
#$# Test Code Here
      ACCELEROMETER_QUERY
#      {% set EBB_VALUE = ( printer["temperature_sensor toolhead_temp"].temperature )|float %}
      RESPOND TYPE=command MSG="Test5: ADXL345 Connection Test"
   {% endif %}


[gcode_macro print_final_test_number]
gcode:
   RESPOND TYPE=command MSG="Test Number after tests { printer["gcode_macro variables_functional_test"].testnumber }"



[gcode_macro global] ### Global Variables 
variable_xyz_run_current:  0.5
variable_xyz_home_current: 0.3
gcode:

[bltouch]
sensor_pin: PD3
control_pin: PD4
x_offset: 0
y_offset: 0
z_offset: 0
pin_move_time: 0.4
speed: 20



[fan_generic fan0]
pin: PA8

[fan_generic fan1]
pin: PC12

[fan_generic fan2]
pin: PC1

[fan_generic fan3]
pin: PC4

# "dfu" LED Commented out to avoid conflict with newHat Operation
# [led status]
# #red_pin: 
# green_pin: PA14
# #blue_pin:
# white_pin:
# #cycle_time: 0.010
# #hardware_pwm: False
# #initial_RED: 0.0
# initial_GREEN: 0.0
# #initial_BLUE: 0.0
# #initial_WHITE: 0.0

# "dfu" LED Commented out to avoid conflict with newHat Operation
# [led dfu]
# #red_pin: 
# green_pin: PA9
# #blue_pin:
# #white_pin:
# #cycle_time: 0.010
# #hardware_pwm: False
# #initial_RED: 0.0
# initial_GREEN: 0.0
# #initial_BLUE: 0.0
# #initial_WHITE: 0.0


[gcode_macro setindicator]
gcode:
  {% if 0 == params.INDICATOR|int %}
    {% if 0 == params.VALUE|int %}
      SET_FAN_SPEED FAN=fan0 SPEED=0.0 
    {% else  %}
      SET_FAN_SPEED FAN=fan0 SPEED=0.1
    {% endif %}
  {% endif %}
  {% if 1 == params.INDICATOR|int %}
    {% if 0 == params.VALUE|int %}
      SET_FAN_SPEED FAN=fan1 SPEED=0.0
    {% else  %}
      SET_FAN_SPEED FAN=fan1 SPEED=0.1
    {% endif %}
  {% endif %}
  {% if 2 == params.INDICATOR|int %}
    {% if 0 == params.VALUE|int %}
      SET_FAN_SPEED FAN=fan2 SPEED=0.0
    {% else  %}
      SET_FAN_SPEED FAN=fan2 SPEED=0.1
    {% endif %}
  {% endif %}
  {% if 3 == params.INDICATOR|int %}
    {% if 0 == params.VALUE|int %}
      SET_FAN_SPEED FAN=fan3 SPEED=0.0
    {% else  %}
      SET_FAN_SPEED FAN=fan3 SPEED=0.1
    {% endif %}
  {% endif %}
  {% if 4 == params.INDICATOR|int %}
    {% if 0 == params.VALUE|int %}
      SET_LED LED=neopixel0 RED=0.00 GREEN=0.00 BLUE=0.00
    {% else  %}
      SET_LED LED=neopixel0 RED=0.05 GREEN=0.05 BLUE=0.05
    {% endif %}
  {% endif %}
  RESPOND TYPE=command MSG="SETINDICATOR: ok"


[gcode_button dsensor0]
pin: PB8
#   The pin on which the button is connected. This parameter must be
#   provided.
#analog_range:
#   Two comma separated resistances (in Ohms) specifying the minimum
#   and maximum resistance range for the button. If analog_range is
#   provided then the pin must be an analog capable pin. The default
#   is to use digital gpio for the button.
#analog_pullup_resistor:
#   The pullup resistance (in Ohms) when analog_range is specified.
#   The default is 4700 ohms.
press_gcode:
#    SET_FAN_SPEED FAN=fan0 SPEED=0.0
    setindicator INDICATOR="0" VALUE="0"
#   A list of G-Code commands to execute when the button is pressed.
#   G-Code templates are supported. This parameter must be provided.
release_gcode:
#    SET_FAN_SPEED FAN=fan0 SPEED=0.1
    setindicator INDICATOR="0" VALUE="1"
#   A list of G-Code commands to execute when the button is released.
#   G-Code templates are supported. The default is to not run any
#   commands on a button release.SET_PIN PIN=my_led VALUE=1

[gcode_button dsensor1]
pin: PA15
#   The pin on which the button is connected. This parameter must be
#   provided.
#analog_range:
#   Two comma separated resistances (in Ohms) specifying the minimum
#   and maximum resistance range for the button. If analog_range is
#   provided then the pin must be an analog capable pin. The default
#   is to use digital gpio for the button.
#analog_pullup_resistor:
#   The pullup resistance (in Ohms) when analog_range is specified.
#   The default is 4700 ohms.
press_gcode:
#    SET_FAN_SPEED FAN=fan1 SPEED=0.0
    setindicator INDICATOR='1' VALUE='0'
#   A list of G-Code commands to execute when the button is pressed.
#   G-Code templates are supported. This parameter must be provided.
release_gcode:
#    SET_FAN_SPEED FAN=fan1 SPEED=0.1
    setindicator INDICATOR='1' VALUE='1'
#   A list of G-Code commands to execute when the button is released.
#   G-Code templates are supported. The default is to not run any
#   commands on a button release.SET_PIN PIN=my_led VALUE=1

[gcode_button dsensor2]
pin: PB5
#   The pin on which the button is connected. This parameter must be
#   provided.
#analog_range:
#   Two comma separated resistances (in Ohms) specifying the minimum
#   and maximum resistance range for the button. If analog_range is
#   provided then the pin must be an analog capable pin. The default
#   is to use digital gpio for the button.
#analog_pullup_resistor:
#   The pullup resistance (in Ohms) when analog_range is specified.
#   The default is 4700 ohms.
press_gcode:
#   SET_FAN_SPEED FAN=fan2 SPEED=0.0
    setindicator INDICATOR='2' VALUE='0'
#   A list of G-Code commands to execute when the button is pressed.
#   G-Code templates are supported. This parameter must be provided.
release_gcode:
#    SET_FAN_SPEED FAN=fan2 SPEED=0.1
    setindicator INDICATOR='2' VALUE='1'
#   A list of G-Code commands to execute when the button is released.
#   G-Code templates are supported. The default is to not run any
#   commands on a button release.SET_PIN PIN=my_led VALUE=1

[gcode_button dsensor3]
pin: PB1
#   The pin on which the button is connected. This parameter must be
#   provided.
#analog_range:
#   Two comma separated resistances (in Ohms) specifying the minimum
#   and maximum resistance range for the button. If analog_range is
#   provided then the pin must be an analog capable pin. The default
#   is to use digital gpio for the button.
#analog_pullup_resistor:
#   The pullup resistance (in Ohms) when analog_range is specified.
#   The default is 4700 ohms.
press_gcode:
#    SET_FAN_SPEED FAN=fan3 SPEED=0.0
    setindicator INDICATOR='3' VALUE='0'
#   A list of G-Code commands to execute when the button is pressed.
#   G-Code templates are supported. This parameter must be provided.
release_gcode:
#    SET_FAN_SPEED FAN=fan3 SPEED=0.1
    setindicator INDICATOR='3' VALUE='1'
#   A list of G-Code commands to execute when the button is released.
#   G-Code templates are supported. The default is to not run any
#   commands on a button release.SET_PIN PIN=my_led VALUE=1

[gcode_button dsensor4]
pin: PB2
#   The pin on which the button is connected. This parameter must be
#   provided.
#analog_range:
#   Two comma separated resistances (in Ohms) specifying the minimum
#   and maximum resistance range for the button. If analog_range is
#   provided then the pin must be an analog capable pin. The default
#   is to use digital gpio for the button.
#analog_pullup_resistor:
#   The pullup resistance (in Ohms) when analog_range is specified.
#   The default is 4700 ohms.
press_gcode:
#    SET_LED LED=status GREEN=0.0
#    SET_LED LED=dfu    GREEN=0.0
    setindicator INDICATOR='4' VALUE='0'
#   A list of G-Code commands to execute when the button is pressed.
#   G-Code templates are supported. This parameter must be provided.
release_gcode:
#    SET_LED LED=status GREEN=1.0
#    SET_LED LED=dfu    GREEN=1.0
    setindicator INDICATOR='4' VALUE='1'
#   A list of G-Code commands to execute when the button is released.
#   G-Code templates are supported. The default is to not run any
#   commands on a button release.SET_PIN PIN=my_led VALUE=1


[mcu host]
serial: /tmp/klipper_host_mcu

# Pins Updated for NewHat2
[output_pin dsensor0pin]
pin: host:gpio13
[output_pin dsensor1pin]
pin: host:gpio6
[output_pin dsensor2pin]
pin: host:gpio9
[output_pin dsensor3pin]
pin: host:gpio22
[output_pin dsensor4pin]
pin: host:gpio17

[gcode_macro resethostgpio]
gcode:
   SET_PIN PIN=dsensor0pin VALUE={0}
   SET_PIN PIN=dsensor1pin VALUE={0}
   SET_PIN PIN=dsensor2pin VALUE={0}
   SET_PIN PIN=dsensor3pin VALUE={0}
   SET_PIN PIN=dsensor4pin VALUE={0}

[gcode_macro sethostgpio]
gcode:
   SET_PIN PIN=dsensor0pin VALUE={1}
   G4 P500                                          
   SET_PIN PIN=dsensor1pin VALUE={1}
   G4 P500                                          
   SET_PIN PIN=dsensor2pin VALUE={1}
   G4 P500                                          
   SET_PIN PIN=dsensor3pin VALUE={1}
   G4 P500                                          
   SET_PIN PIN=dsensor4pin VALUE={1}
   QUERY_PROBE

[include mcu.cfg]
[temperature_sensor mcu_temp]
sensor_type: temperature_mcu

[temperature_sensor cm4]
sensor_type: temperature_host
min_temp: 10
max_temp: 100

[include toolhead.cfg]
[include toolhead.cfg]
[temperature_sensor toolhead_temp]
sensor_type: temperature_mcu
sensor_mcu: toolhead
min_temp: 0
max_temp: 100

[virtual_sdcard]
path: /home/biqu/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

[printer]
kinematics: cartesian
max_velocity: 1000
max_accel: 1000


[adc_temperature PS_voltage]
# PSU Voltage Value from Thermistor Value
# Assumuptions:
# 1. Power Supply Voltage from 0V to 70V
# 2. Thermistor ADC Pullup 4.7k
temperature1: 2
voltage1: 0.151
temperature2: 70
voltage2: 3.049
[temperature_sensor PS_voltage]
adc_voltage: 3.3
sensor_pin: PA2  #$# VINMON
sensor_type: PS_voltage
#min_temp: 11  # For 12V Power Supply
#max_temp: 26  # For 24V Power Supply
gcode_id: PS_voltage

[heater_generic heater0]
#gcode_id:
#   The id to use when reporting the temperature in the M105 command.
#   This parameter must be provided.
heater_pin: PD6  #$# HEATER0
#max_power:
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA0  #$# THERM0
#smooth_time:
control: pid
pid_Kp: 67.552
pid_Ki: 1.603
pid_Kd: 711.829
min_temp: -200
max_temp: 60
#   See the "extruder" section for the definition of the above
#   parameters.

[heater_generic heater1]
#gcode_id:
#   The id to use when reporting the temperature in the M105 command.
#   This parameter must be provided.
heater_pin: PB3  #$# HEATER1
#max_power:
sensor_type: EPCOS 100K B57560G104F
sensor_pin: PA1  #$# THERM1
#smooth_time:
control: pid
pid_Kp: 67.552
pid_Ki: 1.603
pid_Kd: 711.829
min_temp: -200
max_temp: 60
#   See the "extruder" section for the definition of the above
#   parameters.


#$#$# [heater_bed]
#$#$# heater_pin: PD6  #$# HEATER0
#$#$# sensor_pin: PA0  #$# THERM0
#$#$# sensor_type: EPCOS 100K B57560G104F
#$#$# pullup_resistor: 4700
#$#$# control: pid
#$#$# pid_Kp: 67.552
#$#$# pid_Ki: 1.603
#$#$# pid_Kd: 711.829
#$#$# min_temp: 0
#$#$# max_temp: 60



#### Macros to implement sensorless homing
[gcode_macro _HOME_X]
gcode:
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer["gcode_macro global"].xyz_home_current}
    SET_TMC_CURRENT STEPPER=dual_carriage CURRENT={printer["gcode_macro global"].xyz_home_current}
    G4 P500                                          # Wait for StallGuard registers to clear

    G28 X

    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={printer["gcode_macro global"].xyz_run_current}
    SET_TMC_CURRENT STEPPER=dual_carriage CURRENT={printer["gcode_macro global"].xyz_run_current}

    SET_DUAL_CARRIAGE CARRIAGE=1
    
    G91                                              # Move away to centre of build surface
    G1 X-20 F500

    SET_DUAL_CARRIAGE CARRIAGE=0
    
    G91                                              # Move away to centre of build surface
    G1 X-21 F500

[gcode_macro _HOME_Y]
gcode:
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer["gcode_macro global"].xyz_home_current}

    G4 P500                                          # Wait for StallGuard registers to clear

    G28 Y

    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={printer["gcode_macro global"].xyz_run_current}
    
    G91                                              # Move away to centre of build surface
    G1 Y20 F500

[gcode_macro _HOME_Z]
gcode:
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer["gcode_macro global"].xyz_home_current}

    G4 P500                                          # Wait for StallGuard registers to clear

    G28 Z

    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={printer["gcode_macro global"].xyz_run_current}
    
    G91                                              # Move away to centre of build surface
    G1 Z-20 F500

[homing_override]
axes: xyz                                            
gcode:
  {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}

  {% if home_all or 'X' in params %}
    _HOME_X
  {% endif %}
   
  {% if home_all or 'Y' in params %}
    _HOME_Y
  {% endif %}
  
  {% if home_all or 'Z' in params %}
    _HOME_Z
  {% endif %}


# Motor 0
[stepper_x]
enable_pin: !PC9
dir_pin: PA10
step_pin: PB15
microsteps: 16
rotation_distance: 40
#$#endstop_pin: !PB12
endstop_pin: tmc2209_stepper_x:virtual_endstop
position_min: -7
position_max: 230
position_endstop: 230
homing_speed: 50
[tmc2209 stepper_x]
uart_pin: PC15
uart_address: 0
diag_pin: PB4
run_current: 0.580
stealthchop_threshold: 999999
driver_SGTHRS: 70

# Motor 3
[dual_carriage]
axis: x
enable_pin: !PC2
dir_pin: PB10
step_pin: PB12
microsteps: 16
rotation_distance: 40
endstop_pin = tmc2209_dual_carriage:virtual_endstop
position_max: 230
position_endstop: 230
homing_speed: 50
safe_distance: 1
[tmc2209 dual_carriage]
uart_pin: PC15
uart_address: 3
diag_pin: PC3
run_current: 0.580
stealthchop_threshold: 999999
driver_sgthrs: 80


# Motor 1
[stepper_y]
enable_pin: !PB9
dir_pin: !PC11
step_pin: PC10
microsteps: 16
rotation_distance: 40
#$#endstop_pin: !PC14
endstop_pin: tmc2209_stepper_y:virtual_endstop
position_min: -2
position_max: 225
position_endstop: -2
homing_speed: 50
[tmc2209 stepper_y]
uart_pin: PC15
uart_address: 1
diag_pin: PC13
run_current: 0.580
stealthchop_threshold: 999999
driver_SGTHRS: 70

# Motor 2
[stepper_z]
enable_pin: !PC14
dir_pin: PA13
step_pin: PA3
microsteps: 16
rotation_distance: 40
#endstop_pin: PB5
endstop_pin: tmc2209_stepper_z:virtual_endstop
position_min: -5
position_max: 250
position_endstop: 250
homing_speed: 50
[tmc2209 stepper_z]
uart_pin: PC15
uart_address: 2
diag_pin: PC0
run_current: 0.580
stealthchop_threshold: 999999
driver_SGTHRS: 70


[neopixel neopixel0]
pin: PD5 #$# NEOPIXEL0
#   The pin connected to the neopixel. This parameter must be
#   provided.
chain_count: 8
#   The number of Neopixel chips that are "daisy chained" to the
#   provided pin. The default is 1 (which indicates only a single
#   Neopixel is connected to the pin).
color_order: GRB
#   Set the pixel order required by the LED hardware (using a string
#   containing the letters R, G, B, W with W optional). Alternatively,
#   this may be a comma separated list of pixel orders - one for each
#   LED in the chain. The default is GRB.
initial_RED:   0.05
initial_GREEN: 0.0
initial_BLUE:  0.0
#initial_WHITE: 0.0
#   See the "led" section for information on these parameters.

[neopixel neopixel1]
pin: PD2 #$# NEOPIXEL1
#   The pin connected to the neopixel. This parameter must be
#   provided.
chain_count: 8
#   The number of Neopixel chips that are "daisy chained" to the
#   provided pin. The default is 1 (which indicates only a single
#   Neopixel is connected to the pin).
color_order: GRB
#   Set the pixel order required by the LED hardware (using a string
#   containing the letters R, G, B, W with W optional). Alternatively,
#   this may be a comma separated list of pixel orders - one for each
#   LED in the chain. The default is GRB.
initial_RED:   0.0
initial_GREEN: 0.05
initial_BLUE:  0.0
#initial_WHITE: 0.0
#   See the "led" section for information on these parameters.
